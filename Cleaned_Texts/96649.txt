emacs ˈiːmæks originally named emacs acronym editor family text editors characterized manual widely used gnu emacs describes extensible customizable selfdocumenting realtime display development first emacs began work direct descendant gnu emacs ongoing latest version released july emacs builtin commands user interface allows user combine commands macros automate work implementations emacs typically feature dialect lisp programming language allowing users developers write new commands applications editor extensions written among things manage files remote email outlines multimedia git integration rss well implementations eliza pong conways life snake dunnet original emacs written david moon guy l steele jr set macros teco inspired ideas tecomacro editors tecmac popular ported version emacs gnu emacs created richard stallman gnu xemacs variant branched gnu emacs gnu emacs xemacs use similar lisp dialects part compatible xemacs development inactive gnu emacs along vi one two main contenders traditional editor wars unix culture gnu emacs among oldest free open source projects still emacs development began mit ai lab whose computers used incompatible timesharing system operating system featured default line editor known tape editor corrector teco unlike modern text editors teco used separate modes user would either add text edit existing text display document one could place characters directly document typing teco would instead enter character teco command language telling switch input mode enter required characters time edited text displayed screen finally enter character switch editor back command mode similar technique used allow overtyping behavior similar program ed teco already old program initially released richard stallman visited stanford ai lab saw labs e editor written fred impressed editors intuitive wysiwyg see get behavior since become default behavior modern text editors returned mit carl mikkelsen hacker ai lab added teco combined displayediting mode called controlr allowed screen display updated time user entered keystroke stallman reimplemented mode run efficiently added macro feature teco displayediting mode allowed user redefine keystroke run teco e another feature teco lacked randomaccess editing teco pagesequential editor designed editing paper tape time computer memory generally small due cost feature teco allowed editing one page time sequentially order pages file instead adopting es approach structuring file pagerandom access disk stallman modified teco handle large buffers efficiently changed filemanagement method read edit write entire file single buffer almost modern editors use approach new version teco quickly became popular ai lab soon accumulated large collection custom macros whose names often ended mac macs stood macro two years later guy steele took project unifying diverse macros single steele stallmans finished implementation included facilities extending documenting new macro resulting system called emacs stood editing macros alternatively e macros stallman picked name emacs use abbreviation apocryphal hacker koan alleges program named emack bolios popular boston ice cream first operational emacs system existed late stallman saw problem much customization de facto forking set certain conditions usagecitation needed later emacs distributed basis communal sharing means improvements must given back incorporated distributed original emacs like teco ran running behavior sufficiently different teco could considered text editor right quickly became standard editing program mike mcmahon ported emacs tenex operating systems contributors early versions emacs include kent pitman earl killian eugene ciccarelli emacs main editor used mits ai lab laboratory computer following years programmers wrote variety emacslike editors computer systems included eine eine emacs zwei eine initially written lisp machine mike mcmahon daniel weinreb sine sine written owen theodore anderson weinrebs eine first emacs written lisp bernard greenberg wrote multics emacs almost entirely multics lisp honeywells cambridge information systems lab multics emacs later maintained richard soley went develop nile emacslike editor nil project barry margolin many versions emacs including gnu emacs would later adopt lisp extension language james gosling would later invent news java programming language wrote gosling emacs first emacslike editor run unixcitation needed gosling emacs written c used mocklisp language lisplike syntax extension language early ads computer corporation americas cca emacs steve appeared comparisons gnu emacs came mentioned free vs citation richard stallman began work gnu emacs produce free software alternative proprietary gosling emacs gnu emacs initially based gosling emacs stallmans replacement mocklisp interpreter true lisp interpreter required nearly code rewritten became first program released nascent gnu project gnu emacs written c provides emacs lisp also implemented c extension language version first public release made march first widely distributed version gnu emacs version released later early versions gnu emacs numbered initial digit denoting version c core dropped version thought major number would never change thus numbering skipped september announced gnu emacsdevel mailing list gnu emacs would adopt rapid release strategy version numbers would increment quickly gnu emacs offered features gosling emacs particular fullfeatured lisp extension language soon replaced gosling emacs de facto unix emacs editor markus hess exploited security flaw gnu emacs email subsystem cracking spree gained superuser access unix gnu emacs functionality implemented scripting language called emacs lisp gnu emacs written emacs lisp extension one needs port c core implements emacs lisp interpreter makes porting emacs new platform considerably less difficult porting equivalent project consisting native code gnu emacs development relatively closed used example cathedral development style cathedral bazaar project since adopted public development mailing list anonymous cvs access development took place single cvs trunk switched bazaar dvcs november development moved richard stallman remained principal maintainer gnu emacs stepped back role times stefan monnier chong yidong maintainers john wiegley named maintainer meeting stallman early gnu emacs individual committers throughout lucid emacs based early alpha version gnu emacs developed beginning jamie zawinski others lucid inc one bestknown early forks free software development occurred codebases two emacs versions diverged separate development teams ceased efforts merge back single lucid emacs since renamed xemacs development currently inactive recent stable version released january beta released gnu emacs implemented many formerly xemacsonly source needed notable forks include past projects aimed producing small versions emacs proliferated gnu emacs initially targeted computers flat address space least mib computers high end workstations minicomputers left need smaller reimplementations would run common personal computer hardware todays computers enough power capacity eliminate restrictions small clones recently designed fit software installation disks use less capable projects aim implement emacs different dialect lisp different programming language altogether although still actively maintained clones include emacs primarily text editor designed manipulating pieces text although capable formatting printing documents like word processor interfacing external programs latex ghostscript web browser emacs provides commands manipulate differentially display semantic units text words sentences paragraphs source code constructs functions also features keyboard macros performing userdefined batches editing commands gnu emacs realtime display editor edits displayed onscreen occur standard behavior modern text editors emacs among earliest implement alternative issue distinct command display text eg modifying common earlier merely simpler line context editors qed bts ctss multics ed unix ed cpm edlin dos almost functionality emacs including basic editing operations insertion characters file achieved functions written dialect lisp programming language dialect used gnu emacs known emacs lisp elisp developed expressly port emacs gnu unix emacs lisp layer sits atop stable core basic services platform abstraction written c programming language enables gnu emacs ported wide variety operating systems architectures without modifying implementation semantics lisp system editor lives lisp environment variables functions modified need rebuild restart emacs even newly redefined versions core editor features asynchronously compiled loaded live environment replace existing definitions modern gnu emacs features bytecode native code compilation emacs lisp configuration stored variables classes data structures changed simply updating live use lisp dialect case key advantage lisp syntax consists socalled symbolic expressions sexprs act evaluatable code expressions data serialisation format akin simpler general well known ones xml json yaml way little difference practice customising existing features writing new ones accomplished basic way operatively different modern extensible editors instance vs code separate languages used implement interface features editor encode userdefined configuration options goal emacs open design transparently expose emacs internals emacs user normal use way would exposed emacs developer working git tree collapse much possible distinction using emacs programming emacs still providing stable practical responsive editing environment novice users main text editing data structure buffer memory region containing data usually text associated attributes important modes particular important concept emacs providing mechanism disaggregate emacs functionality sets behaviours keybinds relevant specific buffers data major modes provide general package functions commands relevant buffers data way users might interacting eg editing source code specific language editing hex viewing filesystem interacting git etc minor modes define subsidiary collections functionality applicable across many major modes autosavemode minor modes toggled locally buffer well globally across buffers major modes toggled perbuffer data relevant buffer bundled mode handled simply focussing buffer live modifying relevant data directly interaction editor like key presses clicking mouse button realized evaluating emacs lisp code typically command function explicitly designed interactive use keys arbitrarily redefined commands also accessed name commands evaluate arbitrary emacs lisp code provided user various ways eg family eval functions operating buffer region individual expression even simplest user inputs printable characters effectuated emacs lisp functions selfinsertcommand bound default keyboard keys typical text editing buffer parameterises localedefined character associated key used call example pressing f key buffer accepts text input evaluates code selfinsertcommand f inserts one copy character constant f point case determined emacs terms universal argument emacs command code accepts numeric value simplest usage indicates repetition action complex cases repetition doesnt make sense yield behaviours arguments may supplied via command prefices controlu f compactly f expands selfinsertcommand f prefix supplied universal argument every command implicitly runs may called multiply different way supplied prefix arguments may also nonpositive makes sense function accepting argument determine according semantics given number means one common usage functions perform actions reverse simply checking sign univeral argument sort command sorts obverse default reverse called negative argument using absolute value argument sorting key eg sorting reverse column index delimiter undoredo simply negatives traversing forward backward recursive history diffs number steps time relatively large vocabulary commands emacs features longestablished command language concisely express keystrokes necessary perform action command language recognises following shift modifier keys ctrl alt shift meta super hyper may present ibmstyle keyboard though usually configured desired represented command language respective prefices c h keys whose names printable one character enclosed angle brackets thus keyboard shortcut check dependent formulas calculate cells open workbooks excel would rendered emacs command language cas emacs command like metas f ctrlmetas incremental file search filenamematching regexp would expressed ms f cms command language also used express actions needed invoke commands assigned shortcut example command scratchbuffer initialises buffer memory temporary text storage manipulation invoked user reported back mx scra emacs scanning namespace contextually available commands return shortest sequence keystrokes uniquely lexicate emacs predates modern standard terminology graphical user interfaces uses somewhat divergent names familiar interface elements buffers data emacs users interact displayed user inside windows tiled portions terminal screen gui window emacs refers frames modern terminology emacs frame would window emacs window would split depending configuration windows include scroll bars line numbers sometimes header line typically ease navigation mode line bottom usually displaying buffer name active modes point position buffer among others bottom every frame used output messages called echo area text input commands called minibuffer general emacs display elements windows frames etc belong specific data process buffers associated windows multiple windows opened onto buffer example track different parts long text sidebyside without scrolling back forth multiple buffers share text example take advantage different major modes mixedlanguage file similarly emacs instances associated particular frames multiple frames opened displaying single running emacs process eg frame per screen multimonitor setup terminal frame connected via ssh remote system graphical frame displaying emacs process via local systems monitor buffers dont require windows running emacs processes require frames one common usage pattern deploy emacs editing server running headless daemon connecting via framespawning client server made available situation editor required simply declaring client program users editor visual variable server continues run background managing child processes accumulating stdin open pipes ports fifos performing periodic preprogrammed actions remembering buffer undo history saved text snippets command history user state editing sessions mode operation emacs overlaps functionality programs like screen tmux separation display concerns editing functionality emacs display roughly similarly device complex dumb terminal including providing typical graphical wimp elements sufficiently featureful text terminals though graphical frames preferred mode display providing strict superset features text terminal frames first emacs contained help library included documentation every command variable internal function emacs proponents described software selfdocumenting presents user information normal features current state function includes documentation string displayed user request practice subsequently spread programming languages including lisp java perl python help system take users actual code function whether builtin library added thirdparty library emacs also builtin tutorial emacs displays instructions performing simple editing commands invoking tutorial launched file edit tutorial stuart cracraft richard stallman church emacs formed richard stallman parody religion created emacs refers vi editor beast vivivi roman numerals oppose use vi rather calls proprietary software anathema using free version vi sin church emacs newsgroup posts purporting support parody religion supporters vi created opposing cult vi stallman jokingly referred st gnu cius saint church reference ignatius antioch early church father venerated christianity folklore attributing repetitive strain injury colloquially called emacs pinky emacs strong dependence modifier although studies done show emacs causes problems keyboardheavy computer programs users addressed various approaches users recommend simply using two control keys typical pc keyboards like shift keys touch typing avoid overly straining left pinky proper use keyboard reduce softwareside methods hardware solutions include special keyboards kinesiss contoured keyboard places modifier keys easily operated thumb microsoft natural keyboard whose large modifier keys placed symmetrically sides keyboard pressed palm foot pedals also used emacs pinky relatively recent development spacecadet keyboard emacs developed oversized control keys adjacent space bar easy reach word emacs sometimes pluralized emacsen phonetic analogy boxen vaxen referring different varieties httpsenwikipediaorgwikiemacspinky