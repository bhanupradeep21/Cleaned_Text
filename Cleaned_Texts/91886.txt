computer programming gene expression programming gep evolutionary algorithm creates computer programs models computer programs complex tree structures learn adapt changing sizes shapes composition much like living organism like living organisms computer programs gep also encoded simple linear chromosomes fixed length thus gep system benefiting simple genome keep transmit genetic information complex phenotype explore environment adapt evolutionary algorithms use populations individuals select individuals according fitness introduce genetic variation using one genetic operators use artificial computational systems dates back used solve optimization problems eg box friedman introduction evolution strategies rechenberg evolutionary algorithms gained popularity good overview text evolutionary algorithms book introduction genetic algorithms mitchell gene expression belongs family evolutionary algorithms closely related genetic algorithms genetic programming genetic algorithms inherited linear chromosomes fixed length genetic programming inherited expressive parse trees varied sizes shapes gene expression programming linear chromosomes work genotype parse trees phenotype creating genotypephenotype system genotypephenotype system multigenic thus encoding multiple parse trees chromosome means computer programs created gep composed multiple parse trees parse trees result gene expression gep called expression trees masood nekoei et al utilized expression programming style abc optimization conduct abcep method outperformed evolutionary algorithmsabcep genome gene expression programming consists linear symbolic string chromosome fixed length composed one genes equal size genes despite fixed length code expression trees different sizes shapes example chromosome two genes size string position zero indicates start gene l represents natural logarithm function b c represent variables constants used problem shown genes gene expression programming size however fixed length strings code expression trees different sizes means size coding regions varies gene gene allowing adaptation evolution occur smoothly example mathematical expression also represented expression tree q represents square root function kind expression tree consists phenotypic expression gep genes whereas genes linear strings encoding complex structures particular example linear string corresponds straightforward reading expression tree top bottom left right linear strings called kexpressions karva notation going kexpressions expression trees also simple example following kexpression composed two different terminals variables b two different functions two arguments function one argument q expression gives kexpressions gene expression programming correspond region genes gets expressed means might sequences genes expressed indeed true genes reason noncoding regions provide buffer terminals kexpressions encoded gep genes correspond always valid programs expressions genes gene expression programming therefore composed two different domains head tail different properties functions head used mainly encode functions variables chosen solve problem hand whereas tail also used encode variables provides essentially reservoir terminals ensure programs errorfree gep genes length tail given formula h heads length nmax maximum arity example gene created using set functions f q set terminals b nmax choose head length gives gene length g randomly generated string example one gene encodes expression tree case uses elements constitute gene hard see despite fixed length gene potential code expression trees different sizes shapes simplest composed one node first element gene terminal largest composed many nodes elements gene elements head functions maximum arity also hard see trivial implement kinds genetic modification mutation inversion insertion recombination guarantee resulting offspring encode correct errorfree programs chromosomes gene expression programming usually composed one gene equal length gene codes subexpression tree subet subprogram subets interact one another different ways forming complex program figure shows example program composed three subets final program subets could linked addition function restrictions kind linking function one might choose examples complex linkers include taking average median midrange thresholding sum make binomial classification applying sigmoid function compute probability linking functions usually chosen priori problem also evolved elegantly efficiently cellular gene expression programming gene expression programming homeotic genes control interactions different subets modules main program expression genes results different main programs cells determine genes expressed cell subets cell interact one another words homeotic genes determine subets called upon often main program cell kind connections establish one another homeotic genes exactly kind structural organization normal genes built using identical process also contain head domain tail domain difference heads contain linking functions special kind terminals genic terminals represent normal genes expression normal genes results usual different subets cellular system called adfs automatically defined functions tails contain genic terminals derived features generated fly algorithm example chromosome figure three normal genes one homeotic gene encodes main program invokes three different functions total four times linking particular way example clear cellular system allows unconstrained evolution linking functions also code reuse shouldnt hard implement recursion system multicellular systems composed one homeotic gene homeotic gene system puts together different combination subexpression trees adfs creating multiple cells main programs example program shown figure created using cellular system two cells three normal genes applications multicellular systems multiple varied like multigenic systems used problems one output problems multiple outputs headtail domain gep genes normal homeotic basic building block gep algorithms however gene expression programming also explores chromosomal organizations complex headtail structure essentially complex structures consist functional units genes basic headtail domain plus one extra domains extra domains usually encode random numerical constants algorithm relentlessly finetunes order find good solution instance numerical constants may weights factors function approximation problem see geprnc algorithm may weights thresholds neural network see gepnn algorithm numerical constants needed design decision trees see gepdt algorithm weights needed polynomial induction random numerical constants used discover parameter values parameter optimization task fundamental steps basic gene expression algorithm listed pseudocode first four steps prepare ingredients needed iterative loop algorithm steps preparative steps crucial one creation initial population created randomly using elements function terminal sets like evolutionary algorithms gene expression programming works populations individuals case computer programs therefore kind initial population must created get things started subsequent populations descendants via selection genetic modification initial population genotypephenotype system gene expression programming necessary create simple linear chromosomes individuals without worrying structural soundness programs code expression always results syntactically correct programs fitness functions selection environments called training datasets machine learning two facets fitness therefore intricately connected indeed fitness program depends cost function used measure performance also training data chosen evaluate fitness selection environment consists set training records also called fitness cases fitness cases could set observations measurements concerning problem form called training dataset quality training data essential evolution good solutions good training set representative problem hand also wellbalanced otherwise algorithm might get stuck local optimum addition also important avoid using unnecessarily large datasets training slow things unnecessarily good rule thumb choose enough records training enable good generalization validation data leave remaining records validation testing broadly speaking essentially three different kinds problems based kind prediction made first type problem goes name regression second known classification logistic regression special case besides crisp classifications like yes probability also attached outcome last one related boolean algebra logic synthesis regression response dependent variable numeric usually continuous therefore output regression model also continuous quite straightforward evaluate fitness evolving models comparing output model value response training data several basic fitness functions evaluating model performance common based error residual model output actual value functions include mean squared error root mean squared error mean absolute error relative squared error root relative squared error relative absolute error others standard measures offer fine granularity smoothness solution space therefore work well applications problems might require coarser evolution determining prediction within certain interval instance less actual value however even one interested counting hits prediction within chosen interval making populations models evolve based number hits program scores usually efficient due coarse granularity fitness landscape thus solution usually involves combining coarse measures kind smooth function standard error measures listed fitness functions based correlation coefficient rsquare also smooth regression problems functions work best combining measures tend measure correlation caring range values model output combining functions work approximating range target values form efficient fitness functions finding models good correlation good fit predicted actual values design fitness functions classification logistic regression takes advantage three different characteristics classification models obvious counting hits record classified correctly counted hit fitness function simple works well simple problems complex problems datasets highly unbalanced gives poor results one way improve type hitsbased fitness function consists expanding notion correct incorrect classifications binary classification task correct classifications representation means negative case represented correctly classified whereas means positive case represented correctly classified classifications type called true negatives tn true positives tp also two types incorrect classifications represented called false positives fp actual value model predicts false negatives fn target model predicts counts tp tn fp fn usually kept table known confusion matrix counting tp tn fp fn assigning different weights four types classifications possible create smoother therefore efficient fitness functions popular fitness functions based confusion matrix include sensitivityspecificity recallprecision fmeasure jaccard similarity matthews correlation coefficient costgain matrix combines costs gains assigned different types classifications functions based confusion matrix quite sophisticated adequate solve problems efficiently another dimension classification models key exploring efficiently solution space therefore results discovery better classifiers new dimension involves exploring structure model includes domain range also distribution model output classifier margin exploring dimension classification models combining information model confusion matrix possible design sophisticated fitness functions allow smooth exploration solution space instance one combine measure based confusion matrix mean squared error evaluated raw model outputs actual values combine fmeasure rsquare evaluated raw model output target costgain matrix correlation coefficient exotic fitness functions explore model granularity include area roc curve rank measure also related new dimension classification models idea assigning probabilities model output done logistic regression also possible use probabilities evaluate mean squared error similar measure probabilities actual values combine confusion matrix create efficient fitness functions logistic regression popular examples fitness functions based probabilities include maximum likelihood estimation hinge loss logic model structure defined classification logistic regression explore domain range logical functions comprises false true fitness functions available boolean algebra based hits confusion matrix explained section roulettewheel selection perhaps popular selection scheme used evolutionary computation involves mapping fitness program slice roulette wheel proportional fitness roulette spun many times programs population order keep population size constant roulettewheel selection programs selected according fitness luck draw means times best traits might lost however combining roulettewheel selection cloning best program generation one guarantees least best traits lost technique cloning bestofgeneration program known simple elitism used stochastic selection schemes reproduction programs involves first selection reproduction genomes genome modification required reproduction without adaptation evolution wont take place selection operator selects programs replication operator copy depending selection scheme number copies one program originates may vary programs getting copied others copied addition selection usually set population size remains constant one generation another replication genomes nature complex took scientists long time discover dna double helix propose mechanism replication replication strings trivial artificial evolutionary systems instruction copy strings required pass information genome generation generation replication selected programs fundamental piece artificial evolutionary systems evolution occur needs implemented usual precision copy instruction rather errors thrown indeed genetic diversity created genetic operators mutation recombination transposition inversion many others gene expression programming mutation important genetic changes genomes changing element another accumulation many small changes time create great diversity gene expression programming mutation totally unconstrained means gene domain domain symbol replaced another example heads genes function replaced terminal another function regardless number arguments new function terminal replaced function another terminal recombination usually involves two parent chromosomes create two new chromosomes combining different parts parent chromosomes long parent chromosomes aligned exchanged fragments homologous occupy position chromosome new chromosomes created recombination always encode syntactically correct programs different kinds crossover easily implemented either changing number parents involved theres reason choosing two number split points way one chooses exchange fragments example either randomly orderly fashion example gene recombination special case recombination done exchanging homologous genes genes occupy position chromosome exchanging genes chosen random position chromosome transposition involves introduction insertion sequence somewhere chromosome gene expression programming insertion sequences might appear anywhere chromosome inserted heads genes method guarantees even insertion sequences tails result errorfree programs transposition work properly must preserve chromosome length gene structure gene expression programming transposition implemented using two different methods first creates shift insertion site followed deletion end head second overwrites local sequence target site therefore easier implement methods implemented operate chromosomes within chromosome even within single gene inversion interesting operator especially powerful combinatorial consists inverting small sequence within chromosome gene expression programming easily implemented gene domains cases offspring produced always syntactically correct gene domain sequence ranging least two elements big domain chosen random within domain inverted several genetic operators exist gene expression programming different genes gene domains possibilities endless example genetic operators onepoint recombination twopoint recombination gene recombination uniform recombination gene transposition root transposition domainspecific mutation domainspecific inversion domainspecific transposition easily implemented widely used numerical constants essential elements mathematical statistical models therefore important allow integration models designed evolutionary algorithms gene expression programming solves problem elegantly use extra gene domain dc handling random numerical constants rnc combining domain special terminal placeholder rncs richly expressive system created structurally dc comes tail length equal size tail composed symbols used represent rncs example shown simple chromosome composed one gene head size dc stretches positions terminal represents placeholder rncs kind chromosome expressed exactly shown giving expression tree replaced left right top bottom symbols simplicity represented numerals dc giving values corresponding symbols kept array simplicity number represented numeral indicates order array instance following element array rncs expression tree gives elegant structure handling random numerical constants heart different gep systems gep neural networks gep decision trees like basic gene expression algorithm geprnc algorithm also multigenic chromosomes decoded usual expressing one gene another linking together kind linking process genetic operators used geprnc system extension genetic operators basic gep algorithm see straightforwardly implemented new chromosomes hand basic operators mutation inversion transposition recombination also used geprnc algorithm furthermore special dcspecific operators mutation inversion transposition also used aid efficient circulation rncs among individual programs addition also special mutation operator allows permanent introduction variation set rncs initial set rncs randomly created beginning run means gene initial population specified number numerical constants chosen certain range randomly generated circulation mutation enabled genetic operators artificial neural network ann nn computational device consists many simple connected units neurons connections units usually weighted realvalued weights weights primary means learning neural networks learning algorithm usually used adjust structurally neural network three different classes units input units hidden units output units activation pattern presented input units spreads forward direction input units one layers hidden units output units activation coming one unit unit multiplied weights links spreads incoming activation added together unit becomes activated incoming result units threshold summary basic components neural network units connections units weights thresholds order fully simulate artificial neural network one must somehow encode components linear chromosome able express meaningful way gep neural networks gepnn gep nets network architecture encoded usual structure headtail head contains special functionsneurons activate hidden output units gep context units appropriately called functional units terminals represent input units tail usual contains terminalsinput units besides head tail neural network genes contain two additional domains dw dt encoding weights thresholds neural network structurally dw comes tail length dw depends head size h maximum arity nmax evaluated formula dt comes dw length dt equal domains composed symbols representing weights thresholds neural network nngene weights thresholds created beginning run circulation adaptation guaranteed usual genetic operators mutation transposition inversion recombination addition special operators also used allow constant flow genetic variation set weights thresholds example shown neural network two input units two hidden units one output unit total six connections six corresponding weights represented numerals simplicity thresholds equal omitted representation canonical neural network representation neural networks also represented tree case corresponds b represent two inputs represents function connectivity two function adds weighted arguments thresholds activation order determine forwarded output output zero one simple case depends threshold unit total incoming activation equal greater threshold output one zero otherwise nntree linearized follows structure positions dw encodes weights values weight kept array retrieved necessary expression concrete example shown neural net gene exclusiveor problem head size dw size expression results following neural network set weights gives perfect solution exclusiveor function besides simple boolean functions binary inputs binary outputs gepnets algorithm handle kinds functions neurons linear neuron tanh neuron atan neuron logistic neuron limit neuron radial basis triangular basis neurons kinds step neurons also interesting gepnets algorithm use neurons together let evolution decide ones work best solve problem hand gepnets used boolean problems also logistic regression classification regression cases gepnets implemented multigenic systems also cellular systems unicellular multicellular furthermore multinomial classification problems also tackled one go gepnets multigenic systems multicellular systems decision trees dt classification models series questions answers mapped using nodes directed edges decision trees three types nodes root node internal nodes leaf terminal nodes root node internal nodes represent test conditions different attributes variables dataset leaf nodes specify class label different paths tree decision tree induction algorithms involve selecting attribute root node make kind informed decision nodes tree decision trees also created gene expression advantage decisions concerning growth tree made algorithm without kind human input basically two different types dt algorithms one inducing decision trees nominal attributes another inducing decision trees numeric nominal attributes aspect decision tree induction also carries gene expression programming two gep algorithms decision tree induction evolvable decision trees edt algorithm dealing exclusively nominal attributes edtrnc edt random numerical constants handling nominal numeric attributes decision trees induced gene expression programming attributes behave function nodes basic gene expression algorithm whereas class labels behave terminals means attribute nodes also associated specific arity number branches determine growth ultimately growth tree class labels behave like terminals means kclass classification task terminal set k terminals used representing k different classes rules encoding decision tree linear genome similar rules used encode mathematical expressions see decision tree induction genes also head tail head containing attributes terminals tail containing terminals ensures decision trees designed gep always valid programs furthermore size tail also dictated head size h number branches attribute branches nmax evaluated equation example consider decision tree decide whether play outside linearly encoded h represents attribute humidity attribute outlook w represents windy b class labels yes respectively note edges connecting nodes properties data specifying type number branches attribute therefore dont encoded process decision tree induction gene expression programming starts usual initial population randomly created chromosomes chromosomes expressed decision trees fitness evaluated training dataset according fitness selected reproduce modification genetic operators exactly used conventional unigenic system example mutation inversion transposition recombination decision trees nominal numeric attributes also easily induced gene expression programming using framework described dealing random numerical constants chromosomal architecture includes extra domain encoding random numerical constants used thresholds splitting data branching node example gene head size dc starts position encodes decision tree shown system every node head irrespective type numeric attribute nominal attribute terminal associated random numerical constant simplicity example represented numeral random numerical constants encoded dc domain expression follows simple scheme top bottom left right elements dc assigned onebyone elements decision tree following array rncs decision tree results also represented colorfully conventional decision tree gep criticized major improvement genetic programming techniques many experiments perform better existing httpsenwikipediaorgwikigeneexpressionprogramming