artificial intelligence genetic programming gp technique evolving programs starting population unfit usually random programs fit particular task applying operations analogous natural genetic processes population programs operations selection fittest programs reproduction crossover replication andor mutation according predefined fitness measure usually proficiency desired task crossover operation involves swapping specified parts selected pairs parents produce new different offspring become part new generation programs programs selected reproduction copied current generation new generation mutation involves substitution random part program random part program selection operations recursively applied new generation programs typically members new generation average fit members previous generation bestofgeneration program often better bestofgeneration programs previous generations termination evolution usually occurs individual program reaches predefined proficiency fitness level may often happen particular run algorithm results premature convergence local maximum globally optimal even good solution multiple runs dozens hundreds usually necessary produce good result may also necessary large starting population size variability individuals avoid pathologies first record proposal evolve programs probably alan turing gap years publication john hollands adaptation natural artificial systems laid theoretical empirical foundations science richard forsyth demonstrated successful evolution small programs represented trees perform classification crime scene evidence uk home although idea evolving programs initially computer language lisp current amongst john holland organised first genetic algorithms ga conference pittsburgh nichael published evolved programs two specially designed languages included first statement modern treebased genetic programming procedural languages organized treebased structures operated suitably defined gaoperators john koza also phd student john holland patented invention ga program followed publication international joint conference artificial intelligence koza followed publications genetic programming gp name coined david goldberg also phd student john however series books koza starting accompanying really established gp subsequently enormous expansion number publications genetic programming bibliography surpassing listed results genetic programming human competitive koza started annual genetic programming followed annual eurogp first gp series edited koza also saw first gp gp continued flourish leading first specialist gp three years later annual genetic programming theory practice gptp workshop established rick genetic programming papers continue published diversity conferences associated journals today nineteen gp books including several early work set stage current genetic programming research topics applications diverse includes software synthesis repair predictive modeling data financial soft image applications areas design often make use intermediate fred gruau cellular industrial uptake significant several areas including finance chemical industry steel gp evolves computer programs traditionally represented memory tree trees easily evaluated recursive manner every internal node operator function every terminal node operand making mathematical expressions easy evolve evaluate thus traditionally gp favors use programming languages naturally embody tree structures example lisp functional programming languages also suitable nontree representations suggested successfully implemented linear genetic programming perhaps suits traditional imperative commercial gp software discipulus uses automatic induction binary machine code achieve better performance uses directed multigraphs generate programs fully exploit syntax given assembly language multi expression programming uses threeaddress code encoding solutions program representations significant research development conducted include programs stackbased virtual sequences integers mapped arbitrary programming languages via cartesian genetic programming another form gp uses graph representation instead usual tree based representation encode computer programs representations structurally noneffective code introns noncoding genes may seem useless effect performance one individual however alter probabilities generating different offspring variation operators thus alter individuals variational properties experiments seem show faster convergence using program representations allow noncoding genes compared program representations noncoding instantiations may trees introns without latter called canonical trees special canonical crossover operators introduced maintain canonical structure parents children selection process whereby certain individuals selected current generation would serve parents next generation individuals selected probabilistically better performing individuals higher chance getting commonly used selection method gp tournament selection although methods fitness proportionate selection lexicase others demonstrated perform better many gp problems elitism involves seeding next generation best individual best n individuals current generation technique sometimes employed avoid regression genetic programming two fit individuals chosen population parents one two children tree genetic programming parents represented inverted lisp like trees root nodes top subtree crossover parent subtree randomly chosen highlighted yellow animation root donating parent animation left chosen subtree removed replaced copy randomly chosen subtree parent give new child tree sometimes two child crossover used case removed subtree animation left simply deleted copied copy second parent right replacing copy randomly chosen subtree thus type subtree crossover takes two fit trees generates two child trees individuals selected according fitness criteria participate crossover copied next generation akin asexual reproduction natural world may subject mutation many types mutation genetic programming start fit syntactically correct parent aim randomly create syntactically correct child animation subtree randomly chosen highlighted yellow removed replaced randomly generated subtree mutation operators select leaf external node tree replace randomly chosen leaf another mutation select random function internal node replace another function arity number inputs hoist mutation randomly chooses subtree replaces subtree within thus hoist mutation guaranteed make child smaller leaf arity function replacement ensure child size parent whereas subtree mutation animation may depending upon function terminal sets bias either increase decrease tree size subtree based mutations try carefully control size replacement subtree thus size child tree similarly many types linear genetic programming mutation tries ensure mutated child still syntactically correct gp successfully used automatic programming tool machine learning tool automatic problemsolving gp especially useful domains exact form solution known advance approximate solution acceptable possibly finding exact solution difficult applications gp curve fitting data modeling symbolic regression feature selection classification etc john r koza mentions instances genetic programming able produce results competitive humanproduced results called humancompetitive since annual genetic evolutionary computation conference gecco holds human competitive awards called humies cash awards presented humancompetitive results produced form genetic evolutionary computation gp many awards competition years metagenetic programming proposed metalearning technique evolving genetic programming system using genetic programming suggests chromosomes crossover mutation evolved therefore like real life counterparts allowed change rather determined human programmer metagp formally proposed j√ºrgen schmidhuber doug lenats eurisko earlier effort may technique recursive terminating algorithm allowing avoid infinite recursion autoconstructive evolution approach metagenetic programming methods production variation offspring encoded within evolving programs programs executed produce new programs added critics idea often say approach overly broad scope however might possible constrain fitness criterion onto general class results obtain evolved gp would efficiently produce results subclasses might take form meta evolved gp producing human walking algorithms used evolve human running jumping etc fitness criterion applied meta gp would simply one efficiency httpsenwikipediaorgwikigeneticprogramming