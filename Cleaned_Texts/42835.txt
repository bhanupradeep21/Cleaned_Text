searchbased software engineering sbse applies metaheuristic search techniques genetic algorithms simulated annealing tabu search software engineering problems many activities software engineering stated optimization problems optimization techniques operations research linear programming dynamic programming often impractical large scale software engineering problems computational complexity assumptions problem structure researchers practitioners use metaheuristic search techniques impose little assumptions problem structure find nearoptimal goodenough solutions sbse problems divided two types sbse converts software engineering problem computational search problem tackled metaheuristic involves defining search space set possible solutions space typically large explored exhaustively suggesting metaheuristic approach also called fitness function cost function objective function quality measure used measure quality potential solutions many software engineering problems reformulated computational search term searchbased application contrast refers using searchengine technology rather search techniques another industrial application one earliest attempts apply optimization software engineering problem reported webb miller david spooner area software xanthakis colleagues applied search technique software engineering problem first term sbse first used harman research community grew include authors spanning approximately institutions searchbased software engineering applicable almost phases software development process software testing one major search techniques applied software engineering activities instance requirements requirements engineering process needs softwares users environment determined managed searchbased methods used requirements selection optimisation goal finding best possible subset requirements matches user requests amid constraints limited resources interdependencies requirements problem often tackled multiplecriteria decisionmaking problem generally involves presenting decision maker set good compromises cost user satisfaction well requirements identifying software bug code smell debugging refactoring software largely manual laborintensive endeavor though process toolsupported one objective sbse automatically identify fix bugs example via mutation testing genetic programming biologicallyinspired technique involves evolving programs use crossover mutation used search repairs programs altering lines source code genprog evolutionary program repair software repaired bugs approximately one coevolution adopts predator prey metaphor suite programs suite unit tests evolve together influence searchbased software engineering applied software testing including automatic generation test cases test data test case minimization test case regression testing also received attention use sbse program optimization modifying piece software make efficient terms speed resource use object successful one instance line program genetically improved resulting program times faster recent work basios et al shows optimising data structure google guava found improvement execution time improvement memory consumption improvement cpu usage number decisions normally made project manager done automatically example project tools available sbse include coverage code coverage measurement tool number methods techniques available including relatively new area research sbse yet experience broad industry acceptance successful applications sbse industry mostly found within software testing capability automatically generate random test inputs uncovering bugs big scale attractive companies facebook acquired software startup majicke limited developed sapienz searchbased bug finding application scenarios software engineers may reluctant adopt tools little control generate solutions unlike humans context sbse use fixing improving programs developers need confident automatically produced modification generate unexpected behavior outside scope systems requirements testing environment considering fully automated programming yet achieved desirable property modifications would need easily understood humans support maintenance another concern sbse might make software engineer redundant supporters claim motivation sbse enhance relationship engineer httpsenwikipediaorgwikisearchbasedsoftwareengineering