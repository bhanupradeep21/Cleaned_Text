computational intelligence ci evolutionary algorithm ea subset evolutionary generic populationbased metaheuristic optimization algorithm ea uses mechanisms inspired biological evolution reproduction mutation recombination selection candidate solutions optimization problem play role individuals population fitness function determines quality solutions see also loss function evolution population takes place repeated application operators evolutionary algorithms often perform well approximating solutions types problems ideally make assumption underlying fitness landscape techniques evolutionary algorithms applied modeling biological evolution generally limited explorations microevolutionary processes planning models based upon cellular processes real applications eas computational complexity prohibiting fact computational complexity due fitness function evaluation fitness approximation one solutions overcome difficulty however seemingly simple ea solve often complex therefore may direct link algorithm complexity problem complexity following example generic singleobjective genetic algorithm step one generate initial population individuals randomly first generation step two repeat following regenerational steps termination similar techniques differ genetic representation implementation details nature particular applied problem following theoretical principles apply almost eas free lunch theorem optimization states optimization strategies equally effective set optimization problems considered condition evolutionary algorithm fundamentally better another case set problems restricted exactly inevitably done practice therefore improve ea must exploit problem knowledge form eg choosing certain mutation strength problemadapted coding thus two eas compared constraint implied addition ea use problem specific knowledge example randomly generating entire start population creating individuals heuristics another possibility tailor ea given problem domain involve suitable heuristics local search procedures problemrelated procedures process generating offspring form extension ea also known memetic algorithm extensions play major role practical applications speed search process make eas addition offspring least best individual parent generation used form subsequent generation socalled elitist eas general proof convergence condition optimum exists without loss generality maximum search assumed proof property elitist offspring acceptance existence optimum follows per generation k displaystyle k improvement fitness f displaystyle f respective best individual x displaystyle x occur probability p displaystyle thus ie fitness values represent monotonically nondecreasing sequence bounded due existence optimum follows convergence sequence optimum since proof makes statement speed convergence little help practical applications eas justify recommendation use elitist eas however using usual panmictic population model elitist eas tend converge prematurely nonelitist panmictic population model mate selection step section implementation every individual entire population eligible mate nonpanmictic populations selection suitably restricted dispersal speed better individuals reduced compared panmictic ones thus general risk premature convergence elitist eas significantly reduced suitable population models restrict mate theory virtual alphabets david e goldberg showed using representation real numbers ea uses classical recombination operators eg uniform npoint crossover reach certain areas search space contrast coding binary results recommendation eas real representation use arithmetic operators recombination eg arithmetic mean intermediate recombination suitable operators realvalued representations effective binary ones contrary earlier possible limitationaccording many evolutionary algorithms lack clear distinction nature fertilized egg cell undergoes complex process known embryogenesis become mature phenotype indirect encoding believed make genetic search robust ie reduce probability fatal mutations also may improve evolvability indirect also known generative developmental encodings also enable evolution exploit regularity recent work field artificial embryogeny artificial developmental systems seeks address concerns gene expression programming successfully explores system genotype consists linear multigenic chromosomes fixed length phenotype consists multiple expression trees computer programs different sizes synthesis areas evolutionary algorithms practically used almost range complex robot movement art application evolutionary algorithm requires rethinking inexperienced user approach task using ea different conventional exact methods usually part curriculum engineers disciplines example fitness calculation must formulate goal also support evolutionary search process towards eg rewarding improvements yet lead better evaluation original quality criteria example peak utilisation resources personnel deployment energy consumption avoided scheduling task sufficient assess maximum utilisation rather number duration exceedances still acceptable level also recorded order reward reductions actual maximum peak therefore publications aimed beginner want help avoiding beginners mistakes well leading application project includes clarifying fundamental question ea used solve problem better swarm algorithmsclarification needed include google stated automlzero successfully rediscover classic algorithms concept neural computer simulations tierra avida attempt model macroevolutionary dynamics twopopulation ea search constrained rosenbrock function bounded global optimum twopopulation ea search constrained rosenbrock function global optimum bounded estimation distribution algorithm keanes function twopopulation ea search bounded optima simionescus function httpsenwikipediaorgwikievolutionaryalgorithm