computer science operations research genetic algorithm ga metaheuristic inspired process natural selection belongs larger class evolutionary algorithms ea genetic algorithms commonly used generate highquality solutions optimization search problems relying biologically inspired operators mutation crossover examples ga applications include optimizing decision trees better performance solving sudoku hyperparameter optimization causal etc genetic algorithm population candidate solutions called individuals creatures organisms phenotypes optimization problem evolved toward better solutions candidate solution set properties chromosomes genotype mutated altered traditionally solutions represented binary strings encodings also evolution usually starts population randomly generated individuals iterative process population iteration called generation generation fitness every individual population evaluated fitness usually value objective function optimization problem solved fit individuals stochastically selected current population individuals genome modified recombined possibly randomly mutated form new generation new generation candidate solutions used next iteration algorithm commonly algorithm terminates either maximum number generations produced satisfactory fitness level reached population typical genetic algorithm requires standard representation candidate solution array bits also called bit set bit arrays types structures used essentially way main property makes genetic representations convenient parts easily aligned due fixed size facilitates simple crossover operations variable length representations may also used crossover implementation complex case treelike representations explored genetic programming graphform representations explored evolutionary programming mix linear chromosomes trees explored gene expression programming genetic representation fitness function defined ga proceeds initialize population solutions improve repetitive application mutation crossover inversion selection operators population size depends nature problem typically contains several hundreds thousands possible solutions often initial population generated randomly allowing entire range possible solutions search space occasionally solutions may seeded areas optimal solutions likely found successive generation portion existing population selected reproduce new generation individual solutions selected fitnessbased process fitter solutions measured fitness function typically likely selected certain selection methods rate fitness solution preferentially select best solutions methods rate random sample population former process may timeconsuming fitness function defined genetic representation measures quality represented solution fitness function always problemdependent instance knapsack problem one wants maximize total value objects put knapsack fixed capacity representation solution might array bits bit represents different object value bit represents whether object knapsack every representation valid size objects may exceed capacity knapsack fitness solution sum values objects knapsack representation valid otherwise problems hard even impossible define fitness expression cases simulation may used determine fitness function value phenotype eg computational fluid dynamics used determine air resistance vehicle whose shape encoded phenotype even interactive genetic algorithms used next step generate second generation population solutions selected combination genetic operators crossover also called recombination mutation new solution produced pair parent solutions selected breeding pool selected previously producing child solution using methods crossover mutation new solution created typically shares many characteristics parents new parents selected new child process continues new population solutions appropriate size generated although reproduction methods based use two parents biology inspired suggests two parents generate higher quality chromosomes processes ultimately result next generation population chromosomes different initial generation generally average fitness increased procedure population since best organisms first generation selected breeding along small proportion less fit solutions less fit solutions ensure genetic diversity within genetic pool parents therefore ensure genetic diversity subsequent generation children opinion divided importance crossover versus mutation many references fogel support importance mutationbased search although crossover mutation known main genetic operators possible use operators regrouping colonizationextinction migration genetic algorithmscitation needed worth tuning parameters mutation probability crossover probability population size find reasonable settings problem class worked small mutation rate may lead genetic drift nonergodic nature recombination rate high may lead premature convergence genetic algorithm mutation rate high may lead loss good solutions unless elitist selection employed adequate population size ensures sufficient genetic diversity problem hand lead waste computational resources set value larger required addition main operators heuristics may employed make calculation faster robust speciation heuristic penalizes crossover candidate solutions similar encourages population diversity helps prevent premature convergence less optimal generational process repeated termination condition reached common terminating conditions genetic algorithms simple implement behavior difficult understand particular difficult understand algorithms frequently succeed generating solutions high fitness applied practical problems building block hypothesis bbh consists goldberg describes heuristic follows despite lack consensus regarding validity buildingblock hypothesis consistently evaluated used reference throughout years many estimation distribution algorithms example proposed attempt provide environment hypothesis would although good results reported classes problems skepticism concerning generality andor practicality buildingblock hypothesis explanation gas efficiency still remains indeed reasonable amount work attempts understand limitations perspective estimation distribution limitations use genetic algorithm compared alternative optimization algorithms simplest algorithm represents chromosome bit string typically numeric parameters represented integers though possible use floating point representations floating point representation natural evolution strategies evolutionary programming notion realvalued genetic algorithms offered really misnomer really represent building block theory proposed john henry holland theory without support though based theoretical experimental results see basic algorithm performs crossover mutation bit level variants treat chromosome list numbers indexes instruction table nodes linked list hashes objects imaginable data structure crossover mutation performed respect data element boundaries data types specific variation operators designed different chromosomal data types seem work better worse different specific problem domains bitstring representations integers used gray coding often employed way small changes integer readily affected mutations crossovers found help prevent premature convergence socalled hamming walls many simultaneous mutations crossover events must occur order change chromosome better solution approaches involve using arrays realvalued numbers instead bit strings represent chromosomes results theory schemata suggest general smaller alphabet better performance initially surprising researchers good results obtained using realvalued chromosomes explained set real values finite population chromosomes forming virtual alphabet selection recombination dominant much lower cardinality would expected floating point expansion genetic algorithm accessible problem domain obtained complex encoding solution pools concatenating several types heterogenously encoded genes one particular approach allows solving optimization problems require vastly disparate definition domains problem parameters instance problems cascaded controller tuning internal loop controller structure belong conventional regulator three parameters whereas external loop could implement linguistic controller fuzzy system inherently different description particular form encoding requires specialized crossover mechanism recombines chromosome section useful tool modelling simulation complex adaptive systems especially evolution processes practical variant general process constructing new population allow best organisms current generation carry next unaltered strategy known elitist selection guarantees solution quality obtained ga decrease one generation parallel implementations genetic algorithms come two flavors coarsegrained parallel genetic algorithms assume population computer nodes migration individuals among nodes finegrained parallel genetic algorithms assume individual processor node acts neighboring individuals selection reproduction variants like genetic algorithms online optimization problems introduce timedependence noise fitness function genetic algorithms adaptive parameters adaptive genetic algorithms agas another significant promising variant genetic algorithms probabilities crossover pc mutation pm greatly determine degree solution accuracy convergence speed genetic algorithms obtain researchers analyzed ga convergence instead using fixed values pc pm agas utilize population information generation adaptively adjust pc pm order maintain population diversity well sustain convergence capacity aga adaptive genetic adjustment pc pm depends fitness values solutions examples aga variants successive zooming method early example improving caga clusteringbased adaptive genetic use clustering analysis judge optimization states population adjustment pc pm depends optimization states recent approaches use abstract variables deciding pc pm examples dominance codominance liga levelized interpolative genetic algorithm combines flexible ga modified search tackle search space quite effective combine ga optimization methods ga tends quite good finding generally good global solutions quite inefficient finding last mutations find absolute optimum techniques simple hill climbing quite efficient finding absolute optimum limited region alternating ga hill climbing improve efficiency gacitation needed overcoming lack robustness hill climbing means rules genetic variation may different meaning natural case instance provided steps stored consecutive order crossing may sum number steps maternal dna adding number steps paternal dna like adding vectors probably may follow ridge phenotypic landscape thus efficiency process may increased many orders magnitude moreover inversion operator opportunity place steps consecutive order suitable order favour survival variation population whole evolved rather individual members known gene pool recombination number variations developed attempt improve performance gas problems high degree fitness epistasis ie fitness solution consists interacting subsets variables algorithms aim learn exploiting beneficial phenotypic interactions aligned building block hypothesis adaptively reducing disruptive recombination prominent examples approach include problems appear particularly appropriate solution genetic algorithms include timetabling scheduling problems many scheduling software packages based gascitation needed gas also applied genetic algorithms often applied approach solve global optimization problems general rule thumb genetic algorithms might useful problem domains complex fitness landscape mixing ie mutation combination crossover designed move population away local optima traditional hill climbing algorithm might get stuck observe commonly used crossover operators change uniform population mutation alone provide ergodicity overall genetic algorithm process seen markov chain examples problems solved genetic algorithms include mirrors designed funnel sunlight solar antennae designed pick radio signals walking methods computer optimal design aerodynamic bodies complex algorithm design manual skiena advises genetic algorithms task quite unnatural model applications terms genetic operators like mutation crossover bit strings pseudobiology adds another level complexity problem second genetic algorithms take long time nontrivial problems analogy significant progress require sic millions quite appropriate never encountered problem genetic algorithms seemed right way attack never seen computational results reported using genetic algorithms favorably impressed stick simulated annealing heuristic search voodoo needs alan turing proposed learning machine would parallel principles computer simulation evolution started early work nils aall barricelli using computer institute advanced study princeton new publication widely noticed starting australian quantitative geneticist alex fraser published series papers simulation artificial selection organisms multiple loci controlling measurable trait beginnings computer simulation evolution biologists became common early methods described books fraser burnell crosby frasers simulations included essential elements modern genetic algorithms addition hansjoachim bremermann published series papers also adopted population solution optimization problems undergoing recombination mutation selection bremermanns research also included elements modern genetic noteworthy early pioneers include richard friedberg george friedman michael conrad many early papers reprinted fogel although barricelli work reported simulated evolution ability play simple artificial evolution became widely recognized optimization method result work ingo rechenberg hanspaul schwefel early rechenbergs group able solve complex engineering problems evolution another approach evolutionary programming technique lawrence j fogel proposed generating artificial intelligence evolutionary programming originally used finite state machines predicting environments used variation selection optimize predictive logics genetic algorithms particular became popular work john holland early particularly book adaptation natural artificial systems work originated studies cellular automata conducted holland students university michigan holland introduced formalized framework predicting quality next generation known hollands schema theorem research gas remained largely theoretical first international conference genetic algorithms held pittsburgh pennsylvania late general electric started selling worlds first genetic algorithm product mainframebased toolkit designed industrial reference axcelis inc released evolver worlds first commercial ga product desktop computers new york times technology writer john markoff evolver remained interactive commercial genetic algorithm evolver sold palisade translated several languages currently since matlab built three derivativefree optimization heuristic algorithms simulated annealing particle swarm optimization genetic algorithm two direct search algorithms simplex search pattern genetic algorithms subfield evolutionary algorithms subfield evolutionary computing swarm intelligence subfield evolutionary computing evolutionary computation subfield metaheuristic methods metaheuristic methods broadly fall within stochastic optimisation methods httpsenwikipediaorgwikigeneticalgorithm