neuroevolution augmenting topologies neat genetic algorithm ga generation evolving artificial neural networks neuroevolution technique developed kenneth stanley risto miikkulainen university texas austin alters weighting parameters structures networks attempting find balance fitness evolved solutions diversity based applying three key techniques tracking genes history markers allow crossover among topologies applying speciation evolution species preserve innovations developing topologies incrementally simple initial structures complexifying simple control tasks neat algorithm often arrives effective networks quickly contemporary neuroevolutionary techniques reinforcement learning traditionally neural network topology chosen human experimenter effective connection weight values learned training procedure yields situation whereby trial error process may necessary order determine appropriate topology neat example topology weight evolving artificial neural network tweann attempts simultaneously learn weight values appropriate topology neural network order encode network phenotype ga neat uses direct encoding scheme means every connection neuron explicitly represented contrast indirect encoding schemes define rules allow network constructed without explicitly representing every connection neuron allowing compact representation neat approach begins perceptronlike feedforward network input neurons output neurons evolution progresses discrete steps complexity networks topology may grow either inserting new neuron connection path creating new connection formerly unconnected neurons competing conventions problem arises one way representing information phenotype example genome contains neurons b c represented b c genome crossed identical genome terms functionality ordered c b crossover yield children missing information b c b c fact information lost example neat solves problem tracking history genes use global innovation number increases new genes added adding new gene global innovation number incremented assigned gene thus higher number recently gene added particular generation identical mutation occurs one genome given number beyond however mutation number remain unchanged indefinitely innovation numbers allow neat match genes crossed original implementation ken stanley published gpl integrates guile gnu scheme interpreter implementation neat considered conventional basic starting point implementations neat algorithm stanley devised extension neat allows evolution occur real time rather iteration generations used genetic algorithms basic idea put population constant evaluation lifetime timer individual population networks timer expires current fitness measure examined see whether falls near bottom population discarded replaced new network bred two highfitness parents timer set new network placed population participate ongoing evaluations first application rtneat video game called neuroevolving robotic operatives nero first phase game individual players deploy robots sandbox train desired tactical doctrine collection robots trained second phase play allows players pit robots battle robots trained player see well training regimens prepared robots battle extension ken stanleys neat developed colin green adds periodic pruning network topologies candidate solutions evolution process addition addressed concern unbounded automated growth would generate unnecessary structure hyperneat specialized evolve large scale structures originally based cppn theory active field research contentgenerating neat cgneat evolves custom video game content based user preferences first video game implement cgneat galactic arms race spaceshooter game unique particle system weapons evolved based player usage particle system weapon game controlled evolved cppn similarly evolution technique neat particles interactive art program odneat online decentralized version neat designed multirobot odneat executed onboard robots task execution continuously optimize parameters topology artificial neural networkbased controllers way robots executing odneat potential adapt changing conditions learn new behaviors carry tasks online evolutionary process implemented according physically distributed island model robot optimizes internal population candidate solutions intraisland variation two robots exchange candidate solutions meet interisland migration way robot potentially selfsufficient evolutionary process capitalizes exchange controllers multiple robots faster synthesis effective controllers httpsenwikipediaorgwikineuroevolutionofaugmentingtopologies